# Orb Version 6.3.0

version: 2.1
description: Common yarn commands

orbs:
  queue: eddiewebb/queue@1.0.110
  slack: circleci/slack@3.4.2
  utils: artsy/orb-tools@0.5.0

executors:
  node:
    docker:
      - image: cimg/node:14.18.1
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

commands:
  # https://circleci.com/docs/2.0/caching/#basic-example-of-dependency-caching
  save_dependencies:
    steps:
      - save_cache:
          key: yarn-deps-v1-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

  # If there isn't a match to the first key, it'll do a partial match of the
  # second. That means after the first cache save there will always be a cache
  # hit, but it might be an older version of the cache
  #
  # https://circleci.com/docs/2.0/caching/#restoring-cache
  load_dependencies:
    steps:
      - restore_cache:
          keys:
            - yarn-deps-v1-{{ checksum "yarn.lock" }}

  # By default when yarn runs it does not check the filesystem to ensure the
  # packages it expects to be installed are actually installed. Using the
  # --check-files flag ensures that any packages or files missing or out of date
  # on the file system (i.e. those which might be restored from cache) match what
  # the yarn.lock file specifies
  install:
    steps:
      - run: yarn

  setup:
    steps:
      - add_ssh_keys
      - checkout
      - load_dependencies
      - install

  update_dependencies:
    steps:
      - setup
      - save_dependencies

  run-script:
    parameters:
      script:
        type: string
    steps:
      - setup
      - run: yarn << parameters.script >>

  pre-release:
    steps:
      - setup
      # Setup the .npmrc with the proper registry and auth token to publish
      - run:
          name: Setup npmrc
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

  run-release:
    parameters:
      script:
        type: string
        default: yarn release
    steps:
      - pre-release
      - run: << parameters.script >>

jobs:
  run:
    executor: node
    parameters:
      script:
        type: string
    steps:
      - run-script:
          script: << parameters.script >>

  lint:
    executor: node
    steps:
      - run-script:
          script: lint

  relay:
    executor: node
    steps:
      - run-script:
          script: relay

  type-check:
    executor: node
    steps:
      - run-script:
          script: type-check

  test:
    executor: node
    parameters:
      args:
        type: string
        default: ""
    steps:
      - run-script:
          script: test << parameters.args >>

  jest:
    executor: node
    environment:
      JEST_JUNIT_OUTPUT_DIR: "reports/junit/js-test-results.xml"
    parameters:
      args:
        description: Arguments to be passed directly to jest
        type: string
        default: -w 4
      run_all_tests_if_these_files_change:
        type: string
        default: ""
        description: |
          If any of these files have changed, re-run the complete test suite instead of doing incremental tests.
          This is used in conjunction with `only_test_changed` to determine what global resources may alter test
          outcomes that jest may not be able to pick up on.
      only_test_changed:
        type: boolean
        default: false
      notify_slack_on_failure:
        description: |
          If a slack message should be sent out if building off of main branch fails. Requires SLACK_WEBHOOK environment
          variable to be set.
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.notify_slack_on_failure >>
          steps:
            - utils/check-for-env-vars:
                env-vars: SLACK_WEBHOOK
      - setup
      - when:
          condition: << parameters.only_test_changed >>
          steps:
            - run:
                name: jest
                command: |
                  important_files_modified() {
                    FILES="yarn.lock << parameters.run_all_tests_if_these_files_change >>"
                    for file in ${FILES[@]}; do
                      if ! git diff origin/main -s --exit-code $file; then
                        return 0
                      fi
                    done
                    return 1
                  }

                  if [[ "$(git rev-parse --abbrev-ref HEAD)" == "main" ]] || important_files_modified; then
                    yarn jest --coverage --reporters=default --reporters=jest-junit << parameters.args >>
                  else
                    yarn jest --coverage --changedSince=origin/main --reporters=default --reporters=jest-junit << parameters.args >>
                  fi
      - unless:
          condition: << parameters.only_test_changed >>
          steps:
            - run:
                name: jest
                command: yarn jest --coverage --reporters=default --reporters=jest-junit << parameters.args >>
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - when:
          condition: << parameters.notify_slack_on_failure >>
          steps:
            - utils/skip-if-fork-or-not-pr
            - slack/status:
                fail_only: true
                only_for_branches: main
                failure_message: $CIRCLE_PROJECT_REPONAME's tests failed for main

  update-cache:
    executor: node
    steps:
      - update_dependencies

  # A job responsible for ensuring only 1 main build runs at a time so that
  # there are no deployment race conditions
  workflow-queue:
    executor: node
    steps:
      - queue/until_front_of_line:
          time: "2" # how long a queue will wait until the job exits
          only-on-branch: main # restrict queueing to a specific branch (default *)
          consider-job: false # block whole workflow if any job still running

  release:
    executor: node
    steps:
      - run-release
